name: Scheduled Job
on:
 schedule:
   - cron: '0 0 */7 * *'  # Run every 7 days
 workflow_dispatch:        # Manual triggering

jobs:
 run_main_script:
   runs-on: ubuntu-latest
   steps:
   - name: Checkout repository
     uses: actions/checkout@v3

   - name: Set up Python
     uses: actions/setup-python@v4
     with:
       python-version: '3.x'  # Specify the Python version

   - name: Decode and save credentials.json
     run: |
       if [ -n "${{ secrets.CREDENTIALS }}" ]; then
         echo "${{ secrets.CREDENTIALS }}" | base64 --decode > credentials.json
       else
         echo "No existing credentials.json found."
       fi

   - name: Decode token.json from secret
     run: |
       if [ -n "${{ secrets.TOKEN_JSON }}" ]; then
         echo "${{ secrets.TOKEN_JSON }}" | base64 --decode > token.json
       else
         echo "No existing token.json found."
       fi

   - name: Decode Database_id from secret
     run: |
       if [ -n "${{ secrets.Database_id }}" ]; then
         echo "${{ secrets.Database_id }}" | base64 --decode > Database_id
       fi

   - name: Decode page_id from secret
     run: |
       if [ -n "${{ secrets.page_id }}" ]; then
         echo "${{ secrets.page_id }}" | base64 --decode > page_id
       fi

   - name: Decode Notion_token from secret
     run: |
       if [ -n "${{ secrets.Notion_token }}" ]; then
         echo "${{ secrets.Notion_token }}" | base64 --decode > Notion_token
       fi

   - name: Decode google_api_key from secret
     run: |
       if [ -n "${{ secrets.google_api_key }}" ]; then
         echo "${{ secrets.google_api_key }}" | base64 --decode > google_api_key
       fi

   - name: Install dependencies
     run: |
       python -m pip install --upgrade pip
       if [ -f requirements.txt ]; then
         pip install -r requirements.txt
       else
         echo "requirements.txt not found. Skipping dependency installation."
       fi

   - name: Run main.py
     env:
       GOOGLE_APPLICATION_CREDENTIALS: credentials.json
       google_api_key: ${{ secrets.google_api_key }}
       page_id: ${{ secrets.page_id }}
       Notion_token: ${{ secrets.Notion_token }}
     run: python -m scripts.main

   - name: Encode token.json and update secret
     env:
       GH_PAT: ${{ secrets.GH_PAT }}
       REPO_NAME: ${{ github.repository }}
     run: |
       if [ -f "token.json" ]; then
         TOKEN_JSON_BASE64=$(base64 -w 0 token.json)
         curl -X PUT -H "Authorization: token $GH_PAT" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/$REPO_NAME/actions/secrets/TOKEN_JSON \
              -d "{\"encrypted_value\":\"$TOKEN_JSON_BASE64\"}"
       else
         echo "token.json not found, skipping update."
       fi

   - name: Clean up sensitive files
     if: always()
     run: |
       rm -f credentials.json token.json google_api_key Notion_token Database_id page_id
