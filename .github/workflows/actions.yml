name: Scheduled Job
on:
  schedule:
    - cron: '0 0 */7 * *'  # Run every 7 days
  workflow_dispatch:        # Allow manual triggering

jobs:
  run_main_script:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Set a reasonable timeout
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Decode and Save Credentials
      run: |
        if [ -n "${{ secrets.CREDENTIALS }}" ]; then
          echo "${{ secrets.CREDENTIALS }}" | base64 --decode > credentials.json
        fi
        if [ -n "${{ secrets.TOKEN_JSON }}" ]; then
          echo "${{ secrets.TOKEN_JSON }}" | base64 --decode > token.json
        fi
        if [ -n "${{ secrets.google_api_key }}" ]; then
          echo "${{ secrets.google_api_key }}" | base64 --decode > google_api_key
        fi
        if [ -n "${{ secrets.Database_id }}" ]; then
          echo "${{ secrets.Database_id }}" | base64 --decode > Database_id  # Changed from database_id to Database_id
        fi
        if [ -n "${{ secrets.Notion_token }}" ]; then
          echo "${{ secrets.Notion_token }}" | base64 --decode > Notion_token  # Changed from notion_token to Notion_token
        fi
        
    - name: Verify Decoded Files
      run: |
        declare -a files=("credentials.json" "token.json" "google_api_key" "Database_id" "Notion_token")
        missing_files=()
        
        for file in "${files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
            echo "Warning: $file not found!"
          else
            echo "$file exists"
          fi
        done
        
        if [ ${#missing_files[@]} -ne 0 ]; then
          echo "Error: The following files are missing:"
          printf '%s\n' "${missing_files[@]}"
          exit 1
        fi
        
        echo "All necessary files exist."
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          echo "No requirements.txt found. Skipping dependency installation."
        fi
        
    - name: Run main.py
      env:
        GOOGLE_APPLICATION_CREDENTIALS: credentials.json
        GOOGLE_API_KEY: ${{ secrets.google_api_key }}
        TOKEN_FILE: token.json
        DATABASE_ID: ${{ secrets.Database_id }}
        NOTION_TOKEN: ${{ secrets.Notion_token }}
      run: |
        for attempt in {1..3}; do
          if python -m scripts.main; then
            echo "main.py executed successfully."
            exit 0
          fi
          echo "Attempt $attempt failed. Retrying in 5 seconds..."
          sleep 5
        done
        echo "main.py failed after 3 attempts."
        exit 1
        
    - name: Clean Up Sensitive Files
      if: always()
      run: |
        rm -f credentials.json token.json google_api_key Database_id Notion_token
        
    - name: Upload Logs on Failure
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: debug-logs
        path: |
          *.log
          error.txt
        retention-days: 5
